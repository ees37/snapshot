/**
 * This class defines functions and variables relevant to the control of the
 * horizontal and vertical servo motors.
 */

var blaster = require('pi-blaster.js');

var PULSE_WIDTH = 20000;
var MAX_PULSE = 3000;
var MIN_PULSE = 500;
var TOTAL_DEGREES = 180;

var MIN_VALUE = MIN_PULSE / PULSE_WIDTH;
var MAX_VALUE = MAX_PULSE / PULSE_WIDTH;

var ONE_DEGREE = (MAX_VALUE - MIN_VALUE) / TOTAL_DEGREES;

var MOTOR_HOR = {
      PIN: 18,
      HOME: MIN_VALUE,
      DEG_PER_IMG: 15.0
    };

var MOTOR_VER = {
      PIN: 17,
      HOME: MIN_VALUE,
      DEG_PER_IMG: 10.0
    };

/**
 * Set either the vertical or horizontal motor to the 'home' position
 * @memberof module:servo-control
 * @param {MOTOR} MOTOR to return to the home position
 * @param {Function} callback Must accept only one optional error parameter
 */
function returnHome(motor, callback)
{
  if (motor == MOTOR_HOR)
  {
    console.log("horizontal motor returning home (pwm value:  " + motor.HOME + ")");
  }
  else if (motor == MOTOR_VER)
  {
    console.log("vertical motor returning home: (pwm value: " + motor.HOME + ")");
  }
  else
  {
    console.log("horizontal or vertical must be specified!");
    // do not attempt to move the motor
    return;
  }

  // set the motor to the home position
  blaster.setPwm(motor.PIN, motor.HOME, callback);
}

/**
 * Set either the vertical or horizontal motor to the 'home' position
 * @memberof module:servo-control
 * @param {MOTOR} motor  MOTOR to move to specifed position
 * @param {float} position  position (0 - 1) to move motor to
 * @param {Function} callback Must accept only one optional error parameter
 */
function moveMotor(motor, position, callback)
{
  if (motor == MOTOR_HOR)
  {
    console.log("horizontal motor moving to postion " + position);
  }
  else if (motor = MOTOR_VER)
  {
    console.log("vertical motor moving to position " + position);
  }
  else
  {
    console.log("horizontal or vertical must be specified!");
    // do not attempt to move the motor
    return;
  }

  blaster.setPwm(motor, position, callback);
}

/**
 * Class to encapsulate the objects to be exported
 */
function Export() {
  // attributes
  this.motorVertical_ = MOTOR_VER;
  this.motorHorizontal_ = MOTOR_HOR;
  // constants
  this.ONE_DEGREE = ONE_DEGREE;
  this.TOTAL_DEGREES = TOTAL_DEGREES;
  //  functions
  this.returnHome = returnHome;
  this.moveMotor = moveMotor;
}

/**
 * Export definition
 */
 module.exports = new Export();
